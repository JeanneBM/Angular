Lesson 01: Installing Ansible

1.1 Understanding Ansible
1.2 Host Requirements 
1.3 Installing Ansible on the Control Node
1.4 Preparing Managed Nodes
1.5 Verifying Ansible Installation

Lesson 02: Setting up a Managed Environment 	

2.1 Setting up Static Inventory 
2.2 Understanding Dynamic Inventory
2.3 Understanding Ansible Configuration Files
2.4 Managing Ansible Configuration Files

Lesson 03: Using Ad Hoc Commands 	

3.1 Using Ad Hoc Commands
3.2 Understanding Ansible Modules
3.3 Using ansible-doc to get Module Documentation
3.4 Introducing Essential Ansible Modules

Lesson 04: Getting Started with Playbooks 	

4.1 Using YAML to Write Playbooks
4.2 Verifying Playbook Syntax 
4.3 Writing Multiple-Play Playbooks

Lesson 05: Working with Variables and Facts 	

5.1 Understanding Variables
5.2 Using Variables 
5.3 Understanding Variable Precedence
5.4 Managing Host Variables
5.5 Using Multi-valued Variables
5.6 Using Ansible Vault 
5.7 Working with Facts
5.8 Creating Custom Facts

Lesson 06: Using Task Control 	

6.1 Using Loops and Items 
6.2 Using Register Variables with Loops 
6.3 Using when to Run Tasks Conditionally
6.4 Testing Multiple Conditions 
6.5 Using Handlers 
6.6 Using Blocks
6.7 Dealing with Failures
6.8 Managing Changed Status

Lesson 07: Deploying Files 	

7.1 Using Modules to Manipulate Files:
7.2 Managing SELinux File Context
7.3 Using Jinja2 Templates
7.4 Using Control Structures in Jinja2

Lesson 08: Using Ansible Roles 	

8.1 Understanding Directory Structure Best Practices 
8.2 Understanding Ansible Roles
8.3 Using Ansible Galaxy for Standard Roles
8.4 Using the Ansible Galaxy Command Line Tool
8.5 Creating Custom Roles
8.6 Managing Order of Execution 
8.7 Understanding RHEL System Roles

Lesson 09: Using RHEL System Roles 	

9.1 Understanding RHEL System Roles
9.2 Installing RHEL System Roles
9.3 Using the RHEL SELinux System Role
9.4 Using the RHEL TimeSync System Role 

Lesson 10: Using Ansible in Large Environments 	

10.1 Managing Inventory
10.2 Addressing Host Patterns 
10.3 Configuring Parallelism
10.4 Organizing Directory Structure

Lesson 11: Troubleshooting Ansible 	

11.1 Managing Ansible Logs

Understanding Ansible Logging:
* By default Ansible is not configured to log its output anywhere 
* Set log_path in ansible.cfg to write logs to a specific destination
	* Create this file in the project directory, /var/log is not writable by the Ansible user and will only work when running the playbook 
          with sudo
* When using this, you should also use log rotation


vim ansible.cfg // "[defaults] ... " + "log_path = lesson11.log"
ansible-playbook vsftpd.yml
ls
less lesson11.log
ansible-playbook --syntax-check vsftpd.yml
vim vsftpd.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.2 Using the Debug Module

* Variables play an important role in playbooks
* The debug module is used to show values of variables in playbooks
* It can also be used to show messages in specific error situations 


ansible-doc debug
vim debugme.yml
ansible-playbook debugme.yml
ansible-playbook -v debugme.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.3 Using Check Mode

* Use ansible-playbook --check on a playbook to perform check mode; this will show what would happen when running the playbook without 
  actually changing anything 
	* Modules in the playbook must support check mode
	* Check mode doesn't always work well in conditionals
	
* Set: check_mode: yes within a task to always run that specific task in check mode
	* This is useful for checking individual tasks
	* When setting: check_mode: no, for a task, this task will never run in check mode
	* Notice that: check_mode: no, is new since Ansible 2.6, and replaces the: always_run: yes, option from earlier versions 

Using Check Mode on Templates:
* Add --diff to an Ansible playbook run to see differences that would be made by template files on a managed hosts
		* ansible-playbook --check --diff myplaybook.yml
		

ansible-playbook --check vsftpd.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.4 Using Modules for Troubleshooting and Testing 

Understanding Modules to Check:
* uri: checks content that is returned from a specific URL
* script: runs a script from the control node on the managed hosts
* stat: checks the status of files; use it to register a variable and next test to determine if a file exists
* assert: this module will fail with an error if a specific condition is not met

Understanding stat:
* The: stat module can be used to check on file status
* It returns a dictionary that contains a stat field which can have multiple values:
	* atime: last access time of the file
	* isdir: true if file is a directory
	* exists: true if file exists
	* size: size in bytes
	* and many more
	

vim bashversion.yml
ansible-playbook bashversion.yml
vim assertstat.yml
ansible-playbook assertstat.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.5 Troubleshooting Connection Issues

Understanding Connection Issues:
* Connection issues include the following 
	* Issues setting up the physical connection
	* Issues running tasks as teh target user

Analyzing Authentication Issues:
* Confirm the: remote_user setting and existence of remote user on the managed host
* Confirm host key setup
* Verify: become and become_user
* Check that sudo is configured correctly 

Connecting to Managed Hosts:
* When a host is avaliable at different IP addresses / names, you can use ansible_host in inventory to specify how to connect
* The ensures that the connection is made in a persistent way, using the right interface
* web.example.com ansible_host=192.168.4.100

Using Ad Hoc Commands to Test Connectivity:
* The ping module was developed to test connectivity
* Use the --become option to also test privilege escalation
	* ansible ansible1 -m ping
	* ansible ansible1 -m ping --become
* Use the command module to test different items:
	* ansible ansible1 -m command -a 'df'
	* ansible ansible1 -m command -a 'free -m'
	
	
ansible ansible1.example.com -m ping
ansible ansible1.example.com -m ping --become 
ansible all -m command -a 'df'
ansible all -m command -a 'free -m'
ansible all -m command -a 'df | grep sda' //failed
ansible all -m shell -a 'df | grep sda' //failed
ansible all -m shell -a 'df' 
ansible all -m shell -a 'df | grep nvme' 

----------------------------------------------------------------------------------------------------------------------------------------------

11.6 Analyzing Playbook Errors

Analyzing Playbooks:
* Start by reading output messages 
* Next, add verbosity using -v:
	* -v: the output data is displayed
	* -vv: output as well as input data is shown
	* -vvv: adds connection information
	* -vvvv: adds additional information, for instance, about scripts that are executed and the user who's running tasks
	
----------------------------------------------------------------------------------------------------------------------------------------------

11.7 Avoiding Errors in Playbook Best Practices

Best Practices:
* When developing Playbooks, some best practices should be applied 
* The: name of plays and tasks should make sense to clearly see what's happening 
* Include comments to clarify difficult bits
* Use white spaces to make playbooks mor readable
* Indentation is essential
* Keep playbooks simple and small
* Use includes when playbooks risk getting too big

----------------------------------------------------------------------------------------------------------------------------------------------

Lesson 12: Managing Software with Ansible 	

12.1 Understanding Modules Related to Software Management 

Understanding Software Management Tasks:
* To manage software on RHEL systems, different tasks need to be managed
* Systems need to be subscribed 
* Repositories and software channels need to be configured
* Software needs to be installed and removed

Understanding Software Management Modules:
* package: Distribution agnostic module to manage packages
* win_package: Manages packages on Windows
* apt: Manages packages on Ubuntu
* yum: Manages packages on RHEL
* yum_repository: Manages Yum repositories
* package_facts: Returns information about packages as facts
* rpm_key: Adds or removes GPG keys from an RPM package database
* redhat_subscription: Uses the subscription_manager command to manage subscriptions
* rhn_register: Managed Red Hat Network registration using: rhnreg_ks
* rhn_channel: Manages RHN Channel subscription
* Other modules are avaliable, see
 https://docs.ansible.com/ansible/latest/modules/list_of_packaging_modules.html for more information
 
----------------------------------------------------------------------------------------------------------------------------------------------

12.2 Implementing a Playbook to Manage Software


vim sw_mgmt_demo.yml
ansible-playbook sw_mgmt_demo.yml
ansible ansible2.example.com -a "cat /etc/yum.repos.d/lesson12" //failed
ansible ansible2.example.com -a "ls /etc/yum.repos.d/"
ansible ansible2.example.com -a "cat /etc/yum.repos.d/lesson12.repo" //ok

----------------------------------------------------------------------------------------------------------------------------------------------

Lesson 13: Managing Users 	

13.1 Understanding Modules Related to User Management
13.2 Implementing a Playbook to Manage Users
13.3 Managing Encrypted Passwords

Lesson 14: Managing Processes and Tasks 	

14.1 Understanding Modules for Managing Processes and Tasks
14.2 Implementing a Playbook to Manage Processes and Tasks

Lesson 15: Managing Storage 	

15.1 Understanding Modules for Managing Storage
15.2 Implementing a Playbook to Manage Storage

Lesson 16: Managing Networking
	
16.1 Using Network Roles for Network Management
16.2 Understanding Modules for Network Management
16.3 Using Ansible to Manage IPv6
