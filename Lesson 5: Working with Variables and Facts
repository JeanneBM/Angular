5.1 Understanding Variables


 FAST			Redhat 			Ubuntu			Playbook
------			variables		variables		variables
* mem						* inventory		static
* cpu's 					* include		* conditionals 
						* local fact		* package -{{webserver}}

Understanding Variables:
* A variable is a label that is assigned to a specific value to make it easy to refer to that value throughout the playbook
* Variables can be defined by administrators at different levels
* A fact is a special type of variable, that refers to a current state of an Ansible managed system 
* Variables are particularly useful when dealing with managed hosts where specifics are different:
	* Set a variable web_service on Ubuntu and Red Hat
	* Refer to the variable web_service instead of the specific service name  

-----------------------------------------------------------------------------------------------------------------------------------------------

5.2 Using Variables 

Variables can be set at different levels
	* In a playbook
	* In inventory (deprecated)
	* In inclusion files

Variable names have some requirements
	* The name must start with a letter
	* Variable names can only contain letters, numbers and underscores

Defining Variables:
* Variables can be defined in a vars block in the beginning of a playbook

- hosts: all
  vars:
    web_package: httpd

* Alternatively, variables can be definded in a variable file, which will be included from the playbook

- hosts: all
  vars_files:
    - vars/users.yml

Using Variables:
* After defining the variables, it can be used later in the playbook
* Notice that order does matter!
* Refer to a variable as {{web_package}} 
* In conditional statements (discussed later), no curly braces are needed to refer to variable values:
	* when: "'not found' in command_result.err"
	* {% if ansible_facts['devices']['sdb'] is defined}
	     Secondary disk size: {{ansible_facts['devices']['sdb']['size']}}
* If the variable is the first element, using quotes is mandatory!

vim user.yml
ansible-playbook user.yml
ansible -m shell -a "grep lisa /etc/passwd"
ansible all -m shell -a "grep lisa /etc/passwd"

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------

5.3 Understanding Variable Precedence

Understanding Variable Scope:
* Variables can be set with different types of scope:
	* Global scope: this is when a variable is set from inventory or the command line
	* Play scope: this is applied when it is set from a play
	* Host scope: this is applied when set in inventory or using a host variable inclusion file
* When the same variable is set at different levels, the most specific level gets precedence.
* When a variable is set from the command line, it will overwrite anything else:
	* ansible-play book site.yml -e "web_package=apache"

Understanding Bulit-in Variables:
* Some variables are bulit in and cannot be used for anything else:
	* hostvars
	* inventory_hostname
	* inventory_hostname_short
	* groups
	* group_names
	* ansible_check_mode
	* ansible_play_batch
	* ansible_play_hosts
	* ansible_version

-----------------------------------------------------------------------------------------------------------------------------------------------

5.4 Managing Host Variables

Using Host Variables:
* Variables can be assigned to hosts and to groups of hosts 
* The old way of doing so is through inventory, but this is now deprecated because it mixes two types of information in one file
* Instead, you should use directories to populate host and group variables


Defining Host Variables Through Inventory: 
* A variable can be assigned directly to a host:

[servers]
web1.example.com web_package=httpd

* Alternatively, variables can be set for host groups

[servers:vars]
web_package=httpd


Using Include Files:
* To define host and host group variables, directories should be created in the current project directory
* Use ~/myproject/host_vars/web1.example.com to include host specific variables
* Use ~/myproject/group_vars/webservers to include host group specific variables
* Notice that you don't have to define variables in these directories in the playbook, they are picked up automatically


sudo yum install -y tree
tree 
cat inventory
cat group_vars/lamp
vim site.yml
ansible-playbook site.yml
tree

-----------------------------------------------------------------------------------------------------------------------------------------------

5.5 Using Multi-valued Variables

Understanding Array and Dictionary:
* Multi-valued variables can be used in playbooks
* When using a multi-valued variable, it can be written as an array (list), or as a dictionary (hash)
* Each of these has their own specific use cases 

Understanding Dictionary (Hash):
* Dictionaries can be written in two ways:
  users:
   linda:
    username:linda
    shell: /bin/bash
   lisa:
    username: lisa
    shell: /bin/sh

* Or as:
  users:
   linda:{ username: 'linda', shell:'/bin/bash'}
   lisa:{ username: 'lisa', shell:'/bin/bash'}

Using Dictionary:
* To address items in a dictionary, you can use two notations:
	* variable_name['key'], as in users['linda']['shell']
	* variable_name.key, as in users.linda.shell
* You cannot use loop or with_items on dictionaries

Using Array (list):
* Arrays provide a list of items, where each item can be addressed separately 
  users:
  -username:linda
   shell: /bin/bash
  -username: lisa
   shell: /bin/sh
* Individual items in the array can be addressed, using the {{ var_name[0] }} notation  
* To access all variables, you can use with_items or loop


cd arrays
ls
ls vars
cat vars/users-list
cat vars/users-dictionary
vim multi-list.yml
ansible-playbook multi-list.yml
vim multi-dictionary.yml
ansible-playbook multi-dictionary.yml
 
-----------------------------------------------------------------------------------------------------------------------------------------------

5.6 Using Ansible Vault






